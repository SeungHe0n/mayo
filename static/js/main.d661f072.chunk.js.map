{"version":3,"sources":["reportWebVitals.js","components/utils/Button.js","components/Header.js","components/utils/Popup.js","components/MemoInput.js","components/Memo.js","components/MemoList.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Wrap","styled","div","props","size","margin","color","css","Button","icon","onClick","Header","className","Popup","onClose","setTimeout","Form","form","button","MemoInput","onInsert","useState","value","setValue","memoTextarea","useRef","onChange","useCallback","e","target","current","style","height","scrollHeight","popup","setPopup","trimValue","trim","preventDefault","focus","onKeyDown","key","shiftKey","ctrlKey","placeholder","autoFocus","ref","spellCheck","type","checked","Memo","memo","onRemove","onToggle","onEdit","id","text","editFlag","setEditFlag","alert","readOnly","MemoList","memos","slice","reverse","map","App","setMemos","nextId","concat","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d661f072.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import styled, { css } from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  cursor: pointer;\r\n  align-items: flex-start;\r\n\r\n  font-size: ${(props) => (props.size || 1.5) + 'rem'};\r\n  margin-left: ${(props) => (props.margin || 1) + 'rem'};\r\n\r\n  ${(props) => {\r\n    switch (props.color) {\r\n      case 'navy':\r\n        return css`\r\n          color: #42526c;\r\n          &:hover {\r\n            color: #717d91;\r\n          }\r\n        `;\r\n      case 'red':\r\n        return css`\r\n          color: #ff6b6b;\r\n          &:hover {\r\n            color: #ff8787;\r\n          }\r\n        `;\r\n      case 'green':\r\n        return css`\r\n          color: #6cbd4b;\r\n          &:hover {\r\n            color: #9ad483;\r\n          }\r\n        `;\r\n      case 'grey':\r\n        return css`\r\n          color: #737080;\r\n          &:hover {\r\n            color: #929292;\r\n          }\r\n        `;\r\n      default:\r\n        return css`\r\n          color: #adb5bd;\r\n        `;\r\n    }\r\n  }}\r\n`;\r\n\r\nButton.propTypes = {\r\n  icon: PropTypes.element,\r\n  size: PropTypes.number,\r\n  color: PropTypes.string,\r\n  margin: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default function Button({ icon, size, color, margin, onClick }) {\r\n  return (\r\n    <Wrap size={size} margin={margin} color={color} onClick={onClick}>\r\n      {icon}\r\n    </Wrap>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\nimport { ImSearch } from 'react-icons/im';\r\nimport Button from './utils/Button';\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 1.5rem 2rem;\r\n  /* position: fixed; */\r\n\r\n  div {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .logo {\r\n    font-size: 2.5rem;\r\n    font-family: 'Jua', sans-serif;\r\n    color: #42526c;\r\n    user-select: none;\r\n  }\r\n`;\r\n\r\nexport default function Header() {\r\n  return (\r\n    <Wrap>\r\n      <div className=\"logo\">MAYO</div>\r\n      <div>\r\n        <Button icon={<ImSearch />} size={1.7} color=\"navy\" />\r\n      </div>\r\n    </Wrap>\r\n  );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst Wrap = styled.div`\r\n  background: #fff;\r\n  width: 240px;\r\n  height: 50px;\r\n  font-size: 1.1rem;\r\n  text-align: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  left: 9rem;\r\n  animation: modal-show 0.3s; // ?\r\n`;\r\n\r\nexport default function Popup({ onClose }) {\r\n  setTimeout(onClose, 2000);\r\n\r\n  return <Wrap>내용을 입력해주세요.</Wrap>;\r\n}\r\n","import styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { IoArrowDown } from 'react-icons/io5';\r\nimport { useCallback, useRef, useState } from 'react';\r\nimport Popup from './utils/Popup';\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  background: #42526c;\r\n  border-radius: 1.3rem;\r\n  box-shadow: -1px -1px 5px lightgray, 4px 4px 5px lightgray;\r\n\r\n  textarea {\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    margin: 1.3rem 1.3rem 1.3rem 1.9rem;\r\n    padding: 0;\r\n    font-size: 1.125rem;\r\n    font-family: sans-serif;\r\n    line-height: 1.5;\r\n    resize: none;\r\n    color: white;\r\n    height: 1.6875rem;\r\n    max-height: 20rem;\r\n    word-break: break-all;\r\n\r\n    &::placeholder {\r\n      color: lightslategrey;\r\n    }\r\n    flex: 1;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: none;\r\n  outline: none;\r\n  border: none;\r\n  color: white;\r\n  padding: 0 1.6rem 0 0;\r\n  font-size: 1.5rem;\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    color: #bdc3cc;\r\n  }\r\n`;\r\n\r\nMemoInput.propTypes = {\r\n  onInsert: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function MemoInput({ onInsert }) {\r\n  const [value, setValue] = useState('');\r\n  const memoTextarea = useRef(null);\r\n\r\n  const onChange = useCallback((e) => {\r\n    setValue(e.target.value);\r\n    memoTextarea.current.style.height = '0';\r\n    memoTextarea.current.style.height =\r\n      memoTextarea.current.scrollHeight + 'px';\r\n  }, []);\r\n\r\n  const [popup, setPopup] = useState(false);\r\n  const onClick = useCallback(\r\n    (e) => {\r\n      const trimValue = value.trim();\r\n\r\n      if (trimValue === '') {\r\n        // alert('내용을 입력해주세요.');\r\n        setPopup(true);\r\n      } else {\r\n        onInsert(trimValue);\r\n      }\r\n\r\n      setValue('');\r\n      memoTextarea.current.style.height = '1.6875rem';\r\n\r\n      e.preventDefault();\r\n      memoTextarea.current.focus();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  const onKeyDown = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey && !e.ctrlKey) {\r\n          onClick(e);\r\n        }\r\n      }\r\n    },\r\n    [onClick],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {popup && <Popup onClose={() => setPopup(false)} />}\r\n      <Form>\r\n        <textarea\r\n          placeholder=\"Memo about your own\"\r\n          value={value}\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          autoFocus\r\n          ref={memoTextarea}\r\n          spellCheck=\"false\"\r\n        />\r\n        <Button type=\"submit\" onClick={onClick}>\r\n          <IoArrowDown />\r\n        </Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n","import styled, { css } from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport { MdDelete, MdEdit, MdCheckCircle } from 'react-icons/md';\r\nimport { useCallback, useState, useRef } from 'react';\r\nimport Button from './utils/Button';\r\n\r\nconst Wrap = styled.div`\r\n  display: flex;\r\n  background: white;\r\n  border-radius: 1.3rem;\r\n  margin-top: 1.3rem;\r\n  padding: 1.3rem 1.6rem 1.3rem 1.9rem;\r\n  box-shadow: -1px -1px 5px lightgray, 4px 4px 5px lightgray;\r\n\r\n  textarea {\r\n    background: #f3f3f3;\r\n    outline: none;\r\n    border: none;\r\n    padding: 0;\r\n    font-size: 1.125rem;\r\n    font-family: sans-serif;\r\n    line-height: 1.5;\r\n    resize: none;\r\n    color: black;\r\n    height: 10rem;\r\n    max-height: 20rem;\r\n    flex: 1;\r\n    border-radius: 0.3rem;\r\n    word-break: break-all;\r\n  }\r\n\r\n  pre {\r\n    margin: 0;\r\n    padding: 0;\r\n    cursor: pointer;\r\n    flex: 1;\r\n    background: none;\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1.125rem;\r\n    line-height: 1.5;\r\n    white-space: pre-wrap;\r\n    font-family: sans-serif;\r\n    user-select: none;\r\n    word-break: break-all;\r\n  }\r\n\r\n  ${(props) =>\r\n    props.checked &&\r\n    css`\r\n      background: #e7e7e7;\r\n      pre {\r\n        color: #adb5bd;\r\n        text-decoration: line-through;\r\n      }\r\n      textarea {\r\n        color: #adb5bd;\r\n        text-decoration: line-through;\r\n      }\r\n    `};\r\n\r\n  div {\r\n    max-height: 2rem;\r\n  }\r\n`;\r\n\r\nMemo.propTypes = {\r\n  memo: PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    checked: PropTypes.bool.isRequired,\r\n  }).isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function Memo({ memo, onRemove, onToggle, onEdit }) {\r\n  const { id, text, checked } = memo;\r\n  const [value, setValue] = useState(text);\r\n  const [editFlag, setEditFlag] = useState(false);\r\n  const memoTextarea = useRef(null);\r\n\r\n  const onClick = useCallback(\r\n    (e) => {\r\n      if (editFlag) {\r\n        const trimValue = value.trim();\r\n\r\n        if (trimValue === '') {\r\n          alert('빈 내용입니다.');\r\n          setValue(text);\r\n        } else {\r\n          onEdit(id, trimValue);\r\n          setValue(trimValue);\r\n        }\r\n      }\r\n      setEditFlag(!editFlag);\r\n    },\r\n    [editFlag, id, value, onEdit, text],\r\n  );\r\n\r\n  const onChange = useCallback((e) => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onKeyDown = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey && !e.ctrlKey) {\r\n          onClick(e);\r\n        }\r\n      }\r\n    },\r\n    [onClick],\r\n  );\r\n\r\n  if (editFlag) {\r\n    return (\r\n      <Wrap checked={checked}>\r\n        <textarea\r\n          value={value}\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          ref={memoTextarea}\r\n          autoFocus\r\n          spellCheck=\"false\"\r\n        />\r\n        <Button\r\n          icon={<MdCheckCircle />}\r\n          color={!checked && 'green'}\r\n          margin={0.8}\r\n          onClick={onClick}\r\n        />\r\n        <Button\r\n          icon={<MdDelete />}\r\n          color={!checked && 'red'}\r\n          margin={0.2}\r\n          onClick={() => onRemove(id)}\r\n        />\r\n      </Wrap>\r\n    );\r\n  } else {\r\n    return (\r\n      <Wrap checked={checked}>\r\n        <pre onClick={() => onToggle(id)} readOnly>\r\n          {text}\r\n        </pre>\r\n        <Button\r\n          icon={<MdEdit />}\r\n          color={!checked && 'grey'}\r\n          margin={0.8}\r\n          onClick={onClick}\r\n        />\r\n        <Button\r\n          icon={<MdDelete />}\r\n          color={!checked && 'red'}\r\n          margin={0.2}\r\n          onClick={() => onRemove(id)}\r\n        />\r\n      </Wrap>\r\n    );\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport Memo from './Memo';\r\n\r\nMemoList.propTypes = {\r\n  memos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      text: PropTypes.string.isRequired,\r\n      checked: PropTypes.bool.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default function MemoList({ memos, onRemove, onToggle, onEdit }) {\r\n  return (\r\n    <>\r\n      {memos\r\n        .slice(0)\r\n        .reverse()\r\n        .map((memo) => (\r\n          <Memo\r\n            memo={memo}\r\n            key={memo.id}\r\n            onRemove={onRemove}\r\n            onToggle={onToggle}\r\n            onEdit={onEdit}\r\n          />\r\n        ))}\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useRef, useCallback } from 'react';\r\nimport Header from './components/Header';\r\nimport MemoInput from './components/MemoInput';\r\nimport MemoList from './components/MemoList';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrap = styled.div`\r\n  margin: auto;\r\n  padding: 0rem 2rem 4rem 2rem;\r\n  max-width: 725px;\r\n`;\r\n\r\nexport default function App() {\r\n  const [memos, setMemos] = useState([\r\n    {\r\n      id: 1,\r\n      text: '줄바꿈을 사용하고 싶다면\\nSHIFT를 누른 상태로 ENTER를 치세요',\r\n      checked: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      text: '아이디어를 해결했다면 클릭해서 줄을 그을 수 있어요',\r\n      checked: true,\r\n    },\r\n    {\r\n      id: 3,\r\n      text: '위 입력창에 당신의 아이디어나 생각을 입력하세요',\r\n      checked: false,\r\n    },\r\n  ]);\r\n\r\n  const nextId = useRef(4);\r\n\r\n  const onInsert = useCallback(\r\n    (text) => {\r\n      const memo = {\r\n        id: nextId.current,\r\n        text,\r\n        checked: false,\r\n      };\r\n      setMemos(memos.concat(memo));\r\n      nextId.current += 1;\r\n    },\r\n    [memos],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    (id) => {\r\n      setMemos(memos.filter((memo) => memo.id !== id));\r\n    },\r\n    [memos],\r\n  );\r\n\r\n  const onToggle = useCallback(\r\n    (id) => {\r\n      setMemos(\r\n        memos.map((memo) =>\r\n          memo.id === id ? { ...memo, checked: !memo.checked } : memo,\r\n        ),\r\n      );\r\n    },\r\n    [memos],\r\n  );\r\n\r\n  const onEdit = useCallback(\r\n    (id, text) => {\r\n      setMemos(\r\n        memos.map((memo) => (memo.id === id ? { ...memo, text: text } : memo)),\r\n      );\r\n    },\r\n    [memos],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Wrap>\r\n        <MemoInput onInsert={onInsert} />\r\n        <MemoList\r\n          memos={memos}\r\n          onRemove={onRemove}\r\n          onToggle={onToggle}\r\n          onEdit={onEdit}\r\n        />\r\n      </Wrap>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}